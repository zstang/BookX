Microsoft (R) Macro Assembler Version 6.11		    12/10/01 20:25:44
Entry.asm						     Page 1 - 1


				; Entry.asm
				; Copyright (C) 1998, Exposé Corp. All rights reserved.
				;
				; Description:
				;	This code switches the CPU into the protected mode and initializes 
				;	the registers to a flat 4GB address space, where linear addresses
				;	equal physical addresses.
				;
				;	It then calls main() to run any linked C program that has been compiled 
				;	to run in a 32-bit flat environment with a base address of 0.
				;
				;	This code is part of the port of uCOS (C) to the Intel 80x86 running
				;	in Protected Mode. A full description of the port can be found in 
				;	Port86pm.doc
				;
				; Build Commands:
				;	This program requires Microsoft Assembler 6.11.
				;
				;	1. Execute the makefile by typing:
				;		nmake
				;
				;	- or -
				;
				;	2. Type the following command:
				;		ml /c /Fl /coff Entry
				;
				; Questions, comments and suggestions:
				;	Please send e-mail to jean.gareau@exposecorp.com

						.386P				; Use 386+ privileged instructions

				;-----------------------------------------------------------------------------;
				; Macros (to use 32-bit instructions while in real mode)		      ;
				;-----------------------------------------------------------------------------;

				LGDT32		MACRO	Addr			; 32-bit LGDT Macro in 16-bit
						DB	66h			; 32-bit operand override
						DB	8Dh			; lea (e)bx,Addr
						DB	1Eh
						DD	Addr
						DB	0Fh			; lgdt fword ptr [bx]
						DB	01h
						DB	17h
				ENDM

				LIDT32		MACRO	Addr			; 32-bit LIDT Macro in 16-bit
						DB	66h			; 32-bit operand override
						DB	8Dh			; lea (e)bx,Addr
						DB	1Eh
						DD	Addr
						DB	0Fh			; lidt fword ptr [bx]
						DB	01h
						DB	1Fh
				ENDM

				FJMP32		MACRO	Selector,Offset		; 32-bit Far Jump Macro in 16-bit
						DB	66h			; 32-bit operand override
						DB	0EAh			; far jump
						DD	Offset			; 32-bit offset
						DW	Selector		; 16-bit selector
				ENDM

						PUBLIC	EntryPoint		; The linker needs it.
						PUBLIC	_Idt
						PUBLIC	_Gdt
						EXTERN	_main:NEAR

 00000000			_TEXT		SEGMENT PARA USE32 PUBLIC 'CODE'
						ASSUME	CS:_TEXT, DS:_TEXT, ES:_TEXT, SS:_TEXT

				;		ORG	1000h			; => Depends on loader. <=

				;-----------------------------------------------------------------------------;
				; Entry Point. The CPU is executing in 16-bit real mode.		      ;
				;-----------------------------------------------------------------------------;

 00000000			EntryPoint	PROC	NEAR

						LGDT32	GdtDesc			; Load GDT descriptor
 00000000  66		     1			DB	66h			; 32-bit operand override
 00000001  8D		     1			DB	8Dh			; lea (e)bx,Addr
 00000002  1E		     1			DB	1Eh
 00000003  00000048 R	     1			DD	GdtDesc
 00000007  0F		     1			DB	0Fh			; lgdt fword ptr [bx]
 00000008  01		     1			DB	01h
 00000009  17		     1			DB	17h
						LIDT32	IdtDesc			; Load IDT descriptor
 0000000A  66		     1			DB	66h			; 32-bit operand override
 0000000B  8D		     1			DB	8Dh			; lea (e)bx,Addr
 0000000C  1E		     1			DB	1Eh
 0000000D  00000050 R	     1			DD	IdtDesc
 00000011  0F		     1			DB	0Fh			; lidt fword ptr [bx]
 00000012  01		     1			DB	01h
 00000013  1F		     1			DB	1Fh

 00000014  0F 20 C0				mov	eax,cr0			; Get control register 0
 00000017  66| 83 C8 01				or	ax,1			; Set PE bit (bit #0) in (e)ax
 0000001B  0F 22 C0				mov	cr0,eax			; Activate protected mode!
 0000001E  EB 00				jmp	$+2			; To flush the instruction queue.

				; The CPU is now executing in 16-bit protected mode. Make a far jump in order to
				; load CS with a selector to a 32-bit executable code descriptor.

						FJMP32	08h,EntryPoint32	; Jump to EntryPoint32
 00000020  66		     1			DB	66h			; 32-bit operand override
 00000021  EA		     1			DB	0EAh			; far jump
 00000022  00000028 R	     1			DD	EntryPoint32			; 32-bit offset
 00000026  0008		     1			DW	08h		; 16-bit selector

				; This point is never reached.

 00000028			EntryPoint	ENDP

				;-----------------------------------------------------------------------------;
				; The CPU is now executing in 32-bit protected mode.			      ;
				;-----------------------------------------------------------------------------;

 00000028			EntryPoint32	PROC	NEAR

				; Initialize all segment registers to 10h (entry #2 in the GDT)

 00000028  66| B8 0010				mov	ax,10h			; entry #2 in GDT
 0000002C  66| 8E D8		 		mov	ds,ax			; ds = 10h
 0000002F  66| 8E C0		 		mov	es,ax			; es = 10h
 00000032  66| 8E E0		 		mov	fs,ax			; fs = 10h
 00000035  66| 8E E8		 		mov	gs,ax			; gs = 10h
 00000038  66| 8E D0		 		mov	ss,ax			; ss = 10h
				 
				; Set the top of stack to allow stack operations.
				  
 0000003B  BC 00008000		 		mov	esp,8000h		; arbitrary top of stack
				 
				; Call main(), which is not expected to return.

 00000040  E8 00000000 E			call	_main

				; In case main() returns, enter an infinite loop.

 00000045			IdleLoop:
 00000045  F4					hlt
 00000046  EB FD				jmp	IdleLoop

				; This point is never reached.

 00000048			EntryPoint32	ENDP

				;-------------------------------------------------------------------------------;
				; Tables Descriptors (to use with LGDT32 & LIDT32)				;
				;-------------------------------------------------------------------------------;

						ALIGN	4

 00000048			GdtDesc:					; GDT descriptor
 00000048  0017					DW	GDT_SIZE - 1		; GDT limit
 0000004A  00000058 R		 		DD	_Gdt			; GDT base address (below)

						ALIGN	4

 00000050			IdtDesc:					; IDT descriptor
 00000050  01FF					DW	IDT_SIZE - 1		; IDT limit
 00000052  00000070 R		 		DD	_Idt			; IDT base address (below)

				;-------------------------------------------------------------------------------;
				; GDT										;	
				;-------------------------------------------------------------------------------;

						ALIGN	4

				; Global Descriptor Table (GDT)

 00000058			_Gdt:
				 
				; GDT[0]: Null entry, never used.
				     
 00000058  00000000		 		DD	0
 0000005C  00000000		 		DD	0
				 
				; GDT[1]: Executable, read-only code, base address of 0, limit of FFFFFh, 
				;	  granularity bit (G) set (making the limit 4GB)
				 
 00000060  FFFF			 		DW	0FFFFh			; Limit[15..0]
 00000062  0000			 		DW	0000h			; Base[15..0]
 00000064  00			 		DB	00h			; Base[23..16]
 00000065  9A			 		DB	10011010b		; P(1) DPL(00) S(1) 1 C(0) R(1) A(0)
 00000066  CF			 		DB	11001111b		; G(1) D(1) 0 0 Limit[19..16]
 00000067  00			 		DB	00h			; Base[31..24]
				 		
				; GDT[2]: Writable data segment, covering the save address space than GDT[1].
				 
 00000068  FFFF			 		DW	0FFFFh			; Limit[15..0]
 0000006A  0000			 		DW	0000h			; Base[15..0]
 0000006C  00			 		DB	00h			; Base[23..16]
 0000006D  92			 		DB	10010010b		; P(1) DPL(00) S(1) 0 E(0) W(1) A(0)
 0000006E  CF			 		DB	11001111b		; G(1) B(1) 0 0 Limit[19..16]
 0000006F  00			 		DB	00h			; Base[31..24]
				 
 00000070 = 00000018		GDT_SIZE	EQU	$ - _Gdt		; Size, in bytes

				;-------------------------------------------------------------------------------;
				; IDT										;	
				;-------------------------------------------------------------------------------;

						ALIGN	4

				; Interrupt Descriptor Table (IDT)

 00000008			GATE		STRUCT
 00000000  00000000				DD	?
 00000004  00000000				DD	?
				GATE		ENDS

 00000070			_Idt:
 00000070  00000020 [				GATE	32 dup (<0>)		; (00h-19h) Reserved for CPU interrupts
	    00000000
	    00000000
	   ]
 00000170  00000010 [				GATE	16 dup (<0>)		; (20h-2Fh) Reserved for IRQ interrupts
	    00000000
	    00000000
	   ]
 000001F0  00000010 [				GATE	16 dup (<0>)		; (30h-3Fh) Reserved for OS interrupts
	    00000000
	    00000000
	   ]

 00000270 = 00000200		IDT_SIZE	EQU	$ - _Idt		; Size, in bytes

 0270				_TEXT		ENDS
						END
Microsoft (R) Macro Assembler Version 6.11		    12/10/01 20:25:44
Entry.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

FJMP32 . . . . . . . . . . . . .	Proc
LGDT32 . . . . . . . . . . . . .	Proc
LIDT32 . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

GATE . . . . . . . . . . . . . .	 0008


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

_TEXT  . . . . . . . . . . . . .	32 Bit	 0270	  Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

EntryPoint32 . . . . . . . . . .	P Near	 0028	  _TEXT	Length= 0020 Public
  IdleLoop . . . . . . . . . . .	L Near	 0045	  _TEXT	
EntryPoint . . . . . . . . . . .	P Near	 0000	  _TEXT	Length= 0028 Public


Symbols:

                N a m e                 Type     Value    Attr

GDT_SIZE . . . . . . . . . . . .	Number	 0018h	 
GdtDesc  . . . . . . . . . . . .	L Near	 0048	  _TEXT	
IDT_SIZE . . . . . . . . . . . .	Number	 0200h	 
IdtDesc  . . . . . . . . . . . .	L Near	 0050	  _TEXT	
_Gdt . . . . . . . . . . . . . .	L Near	 0058	  _TEXT	Public
_Idt . . . . . . . . . . . . . .	L Near	 0070	  _TEXT	Public
_main  . . . . . . . . . . . . .	L Near	 0000	  External

	   0 Warnings
	   0 Errors
